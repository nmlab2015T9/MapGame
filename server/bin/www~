#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var getPixels = require("get-pixels");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);




/**
 * Socketssssss
 */
mapSizeX = 640;
mapSizeY = 640;
stat = 'one';

statistic = {
    'numPlayer': 0
};

mapArray = {'map': [],
            'birthX': 0,
            'birthY': 0,
            'lat': 0,
            'lng': 0
};
map2D = new Array(640);
for (var i = 0; i < 640; ++i) {
  map2D[i] = new Array(640);
}
DELAY = 20;
lobbyTime = (1000/DELAY) *30;
// this is a hash map [clientId.toString()]->{fbId: integer}
// hash map usage: http://ppt.cc/26F5K
clientHashMap = { id: [], lobTime: lobbyTime*DELAY/1000 };

io.on('connection', function(client){
  statistic.numPlayer++;
  var clientId = client.id;
    clientHashMap.id.push(clientId.toString());
    clientHashMap[clientId.toString()] = { fbId: undefined, canPlay: 'yes', loc: [0, 0], score:0 };
    if(stat == 'start') {
        clientHashMap[clientId.toString()].canPlay = 'no';
    }
    console.log('a user connected, from: ' + clientId + ', total user count = ' +   statistic.numPlayer);
    client.on('fb', function(fbid) {
        var clientFBId = fbid.id;
        console.log("FB got, id = " + clientFBId);
        clientHashMap[clientId.toString()].fbId = clientFBId;
        client.broadcast.emit('FB_In', {'fbId': clientFBId, 'clientId': clientId.toString(), 'loc': [mapArray.birthX-27, mapArray.birthY-69]});
        if (stat == 'one') {
          io.to(clientId).emit('gameState', { 'gameState': stat });
          stat = 'wait';
        }
        else if (stat == 'stop') {
          io.to(clientId).emit('gameState', {'gameState': stat});
          io.to(clientId).emit('mapArray', mapArray);

        }
        else {
          io.to(clientId).emit('gameState', {'gameState': stat});
        }
    });
    client.on('center', function(center) {
        mapArray.lat = center.lat;
        mapArray.lng = center.lng;
        console.log('user specified center: (' + center.lat + ', ' + center.lng + ')');
        getPixels("http://maps.googleapis.com/maps/api/staticmap?center=" + center.lat + "," + center.lng + "&zoom=18&size=640x640&sensor=false&style=feature:all%7Celement:all%7Chue:0xff0000%7Csaturation:100&style=feature:road%7Celement:geometry%7Chue:0x66f934%7Clightness:100&style=feature:water%7Celement:geometry%7Ccolor:0xbbbbff&style=feature:all%7Celement:labels%7Cvisibility:off&style=feature:road%7Celement:labels%7Cvisibility:off", function(err, pixels) {
          if(err) {
            console.error("Bad image path!!!!!");
            return
          }
          for(var x = 0; x < 640; x++) {
            for (var y = 0; y < 640; y++) {
              //console.log(pixels.get(x,y,2));


              // white for road = 0
              if (pixels.get(x, y, 0) >= 250 && pixels.get(x, y, 1) >= 250 && pixels.get(x, y, 2) >= 250)
                map2D[x][y] = 0;
                //mapArray.map[y * 640 + x] = 0;



              else if (pixels.get(x, y, 0) >= 250) {
                // red for ground = 1
                if (pixels.get(x, y, 1) <= 218 && pixels.get(x, y, 2) <= 218)
                  map2D[x][y] = 0;
                else if (pixels.get(x, y, 1) >= 226 && pixels.get(x, y, 2) >= 226)
                  map2D[x][y] = 0;

                // pink for buildings = 2   (255, 225, 225) ~ (255, 219, 219)
                else
                  map2D[x][y] = 1;
                  //mapArray.map[y * 640 + x] = 2;
              }

              // blue for water = 3
              else if (pixels.get(x, y, 0) >= 185 && pixels.get(x, y, 1) >= 185 && pixels.get(x, y, 2) >= 250 &&
                       pixels.get(x, y, 0) <= 188 && pixels.get(x, y, 1) <= 188)
                map2D[x][y] = 1;
                //mapArray.map[y * 640 + x] = 3;



              // default....
              else {
                //console.error("the img contains -1 value!!!");
                map2D[x][y] = 0;
                //mapArray.map[y * 640 + x] = 1;
              }
            }
          }
          console.log('static map pixel parsed, generate myX, myY...');
          mapArray.birthX = Math.round(Math.random()*640);
          mapArray.birthY = Math.round(Math.random()*640);

          while (!(mapArray.birthY <= 638 && mapArray.birthY <=638 &&
                 map2D[mapArray.birthX-1][mapArray.birthY+1] === 0 && map2D[mapArray.birthX][mapArray.birthY+1] === 0 && map2D[mapArray.birthX+1][mapArray.birthY+1] === 0 &&
                 map2D[mapArray.birthX-1][mapArray.birthY] === 0 && map2D[mapArray.birthX][mapArray.birthY] === 0 && map2D[mapArray.birthX+1][mapArray.birthY] === 0 &&
                 map2D[mapArray.birthX-1][mapArray.birthY-1] === 0 && map2D[mapArray.birthX][mapArray.birthY-1] === 0 && map2D[mapArray.birthX+1][mapArray.birthY-1] === 0)) {
            mapArray.birthX = Math.round(Math.random()*640);
            mapArray.birthY = Math.round(Math.random()*640);
          }
          console.log('myX = '+ mapArray.birthX +', myY = ' + mapArray.birthY );

          magicConvertMap();

          console.log('magic converting job is done!!!!  2D -> 1D');

          for(var x = 0; x != mapSizeX; ++x) {
            for(var y = 0; y != mapSizeY; ++y) {
              mapArray.map[y*mapSizeX + x] = map2D[x][y];
            }
          }

          console.log('=====SEND TO EVERY CLIENT!!!=====');

          stat = 'stop';
            setInterval(updateEveryPlayer, DELAY);
            io.emit('mapArray', mapArray);


        });
  });
  client.on('getOtherPlayer', function(id) {
    for(var key in clientHashMap) {
        if(key == 'id' || key == 'lobTime') continue;
      if(key != clientId && clientHashMap[key].fbId != undefined) {
          io.to(clientId).emit('FB_In', {'fbId': clientHashMap[key].fbId, 'clientId': key , 'loc': clientHashMap[key].loc })
      }
    }
  });
  client.on('frame', function(data){
      clientHashMap[clientId.toString()].loc = data.loc;
      clientHashMap[clientId.toString()].score = data.score;
  });

  client.on('eaten', function(data) {
      if(data.id != undefined) {
          client.broadcast.emit('destroyMush', {id: data.id, type: data.type});
          console.log('got eaten, id = ', data.id);
          setTimeout(spawnMush, 5000, data.type, data.id);
      }
  });

  client.on('disconnect', function(){
      statistic.numPlayer--;
      console.log(clientId + 'user disconnected, total user = ' + statistic.numPlayer);
      //console.log('dis: clientId = '+ clientId + ', clientId.toS = ' + clientId.toString()+', cHM[].fbId = '+clientHashMap[clientId.toString()].fbId);
      if(clientHashMap[clientId.toString()].fbId != undefined) {
          io.emit('FB_Out', {'fbId': clientHashMap[clientId.toString()].fbId, 'clientId': clientId.toString()});
      }
      if(clientId.toString() in clientHashMap) {
          var idx = clientHashMap.id.indexOf(clientId.toString());
          if (idx != -1) clientHashMap.id = clientHashMap.id.splice(idx, 1);
          delete clientHashMap[clientId.toString()];
      }
  });
});


function startTheGame() {
    console.log('times up!! lets start the game!!!!!!!!!!!!!!!!!!!');
    stat = 'start';
    io.emit('startGame', { haha: 'Fight!!' });
    spawnMush('Z', 0);
    for (var i = 1; i != 5; ++i) {
        spawnMush('G', i);
    }
    for (var i = 5; i != 9; ++i) {
        spawnMush('S', i);
    }
}

function spawnMush(type, idd) {
    console.log('spawning Mush, id = '+ idd);
    var xxx = Math.round(Math.random()*640);
    var yyy = Math.round(Math.random()*640);
    while (!(xxx <= 638 && yyy <=638 &&
    map2D[xxx-1][yyy+1] === 0 && map2D[xxx][yyy+1] === 0 && map2D[xxx+1][yyy+1] === 0 &&
    map2D[xxx-1][yyy] === 0 && map2D[xxx][yyy] === 0 && map2D[xxx+1][yyy] === 0 &&
    map2D[xxx-1][yyy-1] === 0 && map2D[xxx][yyy-1] === 0 && map2D[xxx+1][yyy-1] === 0)) {
        xxx = Math.round(Math.random()*640);
        yyy = Math.round(Math.random()*640);
    }

    if(type == 'G') {
        io.emit('mushroom', { type: 'G', id: idd, x: xxx, y: yyy });
    }
    else if(type == 'S') {
        io.emit('mushroom', { type: 'S', id: idd, x: xxx, y: yyy });
    }
    else if(type == 'Z') {
        io.emit('mushroom', { type: 'Z', id: idd, x: xxx, y: yyy });
    }
}


function updateEveryPlayer() {
    if (stat == 'stop') {
        lobbyTime--;
        clientHashMap.lobTime = lobbyTime*DELAY/1000;
        if (lobbyTime <= 0)
            startTheGame();
    }

    io.emit('update', clientHashMap);
}
old2D = map2D.slice();
function magicConvertMap() {
  var check = [50, 47, 44, 41, 38, 35, 32, 30, 28, 25, 23, 20, 17, 15, 13, 11, 10, 5];

  for (var x = 0; x < 640; x++){
    for (var y = 0; y < 640; y++){
      if(map2D[x][y] == 1){
        for (var a = 0; a < check.length; a++){
          var OK = 1;
          for (var ii = 0; ii < check[a]; ii++){
            for (var jj = 0; jj < check[a]; jj++){
              if(x+ii < 640 && y+jj < 640 && map2D[x+ii][y+jj] == 0){
                OK = 0;
                break;
              }
            }
            if(OK == 0){
              break;
            }
          }
          if(OK == 1){
            //console.log(x +", "+ y +"   r= "+check[a]);
            for (var i = 0; i < check[a]; i++){
              for (var j = 0; j < check[a]; j++){
                if(x+i < 640 && y+j < 640){
                  map2D[x+i][y+j] = 0;
                }
              }
            }
            map2D[x][y] = check[a];
          }
        }
      }
    }
  }
}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
